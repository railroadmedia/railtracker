<?php

namespace Railroad\Railtracker\Tests\Integration;

use Illuminate\Foundation\Exceptions\Handler;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Monolog\Handler\StreamHandler;
use Railroad\Railtracker\Services\IpDataApiSdkService;
use Railroad\Railtracker\Tests\RailtrackerTestCase;

class CharsetTestextends extends RailtrackerTestCase
{
    /**
     * @var \PHPUnit\Framework\MockObject\MockObject $ipDataApiSdkServiceMock
     */
    public $ipDataApiSdkServiceMock;

    public function getEnvironmentSetUp($app)
    {
        parent::getEnvironmentSetUp($app); // TODO: Change the autogenerated stub

        $this->ipDataApiSdkServiceMock = $this
            ->getMockBuilder(IpDataApiSdkService::class)
            ->setMethods(['bulkRequest'])
            ->getMock();

        app()->instance(IpDataApiSdkService::class, $this->ipDataApiSdkServiceMock);
    }

    public function tearDown()
    {
        DB::statement('SET FOREIGN_KEY_CHECKS=0');
        DB::statement('truncate railtracker4_agent_browser_versions');
        DB::statement('truncate railtracker4_agent_browsers');
        DB::statement('truncate railtracker4_agent_strings');
        DB::statement('truncate railtracker4_device_kinds');
        DB::statement('truncate railtracker4_device_models');
        DB::statement('truncate railtracker4_device_platforms');
        DB::statement('truncate railtracker4_device_versions');
        DB::statement('truncate railtracker4_exception_classes');
        DB::statement('truncate railtracker4_exception_codes');
        DB::statement('truncate railtracker4_exception_files');
        DB::statement('truncate railtracker4_exception_lines');
        DB::statement('truncate railtracker4_exception_messages');
        DB::statement('truncate railtracker4_exception_traces');
        DB::statement('truncate railtracker4_ip_addresses');
        DB::statement('truncate railtracker4_ip_cities');
        DB::statement('truncate railtracker4_ip_country_codes');
        DB::statement('truncate railtracker4_ip_country_names');
        DB::statement('truncate railtracker4_ip_currencies');
        DB::statement('truncate railtracker4_ip_latitudes');
        DB::statement('truncate railtracker4_ip_longitudes');
        DB::statement('truncate railtracker4_ip_postal_zip_codes');
        DB::statement('truncate railtracker4_ip_regions');
        DB::statement('truncate railtracker4_ip_timezones');
        DB::statement('truncate railtracker4_language_preferences');
        DB::statement('truncate railtracker4_language_ranges');
        DB::statement('truncate railtracker4_media_playback_sessions');
        DB::statement('truncate railtracker4_media_playback_types');
        DB::statement('truncate railtracker4_methods');
        DB::statement('truncate railtracker4_requests');
        DB::statement('truncate railtracker4_response_durations');
        DB::statement('truncate railtracker4_response_status_codes');
        DB::statement('truncate railtracker4_route_actions');
        DB::statement('truncate railtracker4_route_names');
        DB::statement('truncate railtracker4_url_domains');
        DB::statement('truncate railtracker4_url_paths');
        DB::statement('truncate railtracker4_url_protocols');
        DB::statement('truncate railtracker4_url_queries');
        DB::statement('truncate sessions');
        DB::statement('truncate users');
        DB::statement('SET FOREIGN_KEY_CHECKS=1');

        parent::tearDown();
    }

    public function test_fails_as_expected()
    {
        // do *not* run migration to update charset to utf8mb4

        $outputBase = [
            [
                'is_eu' => false,
                'region' => '',
                'region_code' => '',
                'country_name' => 'Australia',
                'country_code' => 'AU',
                'continent_name' => 'Oceania',
                'continent_code' => 'OC',
                'latitude' => -33.493999999999999772626324556767940521240234375,
                'longitude' => 143.21039999999999281499185599386692047119140625,
                'asn' => 'AS13335',
                'organisation' => 'Cloudflare Inc',
                'postal' => '',
                'calling_code' => '61',
                'flag' => 'https://ipdata.co/flags/au.png',
                'emoji_flag' => '🇦🇺',
                'emoji_unicode' => 'U+1F1E6 U+1F1FA',
                'languages' =>
                    (object) array(
                        0 =>
                            array(
                                'name' => 'English',
                                'native' => 'English',
                            ),
                    ),
                'currency' =>
                    (object) array(
                        'name' => 'Australian Dollar',
                        'code' => 'AUD',
                        'symbol' => 'AU$',
                        'native' => '$',
                        'plural' => 'Australian dollars',
                    ),
                'time_zone' =>
                    (object) array(
                        'name' => '',
                        'abbr' => '',
                        'offset' => '',
                        'is_dst' => '',
                        'current_time' => '',
                    ),
                'threat' =>
                    (object) array(
                        'is_tor' => false,
                        'is_proxy' => false,
                        'is_anonymous' => false,
                        'is_known_attacker' => false,
                        'is_known_abuser' => true,
                        'is_threat' => true,
                        'is_bogon' => false,
                    ),
                'count' => '695',
            ]
        ];

        $outputOne = [array_merge($outputBase[0], ['ip' => '1.1.1.1', 'city' => 'Los Ángeles'])];
        $outputTwo = [array_merge($outputBase[0], ['ip' => '2.2.2.2', 'city' => 'Los Angeles'])];

        $this->ipDataApiSdkServiceMock
            ->expects($this->at(0))
            ->method('bulkRequest')
            ->willReturn($outputOne);

        $this->ipDataApiSdkServiceMock
            ->expects($this->at(1))
            ->method('bulkRequest')
            ->willReturn($outputTwo);


        $request = $this->randomRequest('1.1.1.1');
        $this->sendRequest($request);

        try{
            $this->processTrackings();
        }catch(\Exception $exception){
            $this->fail($exception->getMessage());
        }

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'ip_city' => 'Los Ángeles',
            ]
        );


        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'ip_cities',
            [
                'ip_city' => 'Los Ángeles',
            ]
        );

        // request with non-accent-having value

        $request = $this->randomRequest('2.2.2.2');
        $this->sendRequest($request);

        $messageQueryFailureExpected = '"Error while writing to association tables ("SQLSTATE[23000]: Integrity constraint violation: 1451 Cannot delete or update a parent row: a foreign key constraint fails (`railtracker_test`.`railtracker4_requests`, CONSTRAINT `railtracker4_requests_ip_city_foreign` FOREIGN KEY (`ip_city`) REFERENCES `railtracker4_ip_cities` (`ip_city`)) (SQL: insert into `railtracker4_ip_cities` (`ip_city`) values (Los Angeles) on duplicate key update `ip_city`=values(`ip_city`))")"';

//        $this->expectOutputString($messageQueryFailureExpected);

        try{
            $this->processTrackings();
        }catch(\Exception $exception){
            $this->fail('Exception thrown');
        }

        $this->assertDatabaseMissing(
            config('railtracker.table_prefix') . 'ip_cities',
            [
                'ip_city' => 'Los Angeles',
            ]
        );
    }

//    public function test_passes()
//    {
//        // *DO* run migration to update charset to utf8mb4
//
//        // DB records with accent-having value
//
//        // request with non-accent-having value
//
//        // process that request
//
//        // pass
//    }
}