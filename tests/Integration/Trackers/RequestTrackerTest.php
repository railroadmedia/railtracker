<?php

namespace Railroad\Railtracker\Tests\Integration\Trackers;

use Carbon\Carbon;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\DB;
use Railroad\Railtracker\Entities\Request as RequestEntity;
use Railroad\Railtracker\Events\RequestTracked;
use Railroad\Railtracker\Services\ConfigService;
use Railroad\Railtracker\Services\IpDataApiSdkService;
use Railroad\Railtracker\Tests\RailtrackerTestCase;
use Railroad\Railtracker\Tests\Resources\IpDataApiStubDataProvider;
use Railroad\Railtracker\Tests\Resources\Models\User;
use Railroad\Railtracker\Trackers\RequestTracker;
use Railroad\Railtracker\ValueObjects\RequestVO;
use stdClass;

class RequestTrackerTest extends RailtrackerTestCase
{
    // todo: new test case that makes multiple requests and asserts multiple results (heck, include responses and exceptions in there too maybe)?

    /**
     * @var \PHPUnit\Framework\MockObject\MockObject $ipDataApiSdkServiceMock
     */
    public $ipDataApiSdkServiceMock;

    protected function getEnvironmentSetUp($app)
    {
        parent::getEnvironmentSetUp($app); // TODO: Change the autogenerated stub

        $this->ipDataApiSdkServiceMock = $this
            ->getMockBuilder(IpDataApiSdkService::class)
            ->setMethods(['bulkRequest'])
            ->getMock();

        app()->instance(IpDataApiSdkService::class, $this->ipDataApiSdkServiceMock);
    }

    public function test_track_protocol_http()
    {
        $url = 'http://test.com/';
        $request = $this->createRequest($this->faker->userAgent, $url);

        $this->sendRequestAndCallProcessCommand($request);

        // -------------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'url_protocols',
            [
                'url_protocol' => 'http',
            ]
        );

        // -------------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'url_protocol' => 'http',
            ]
        );
    }

    public function test_track_protocol_https()
    {
        $url = 'https://test.com/';
        $request = $this->createRequest($this->faker->userAgent, $url);

        $this->sendRequestAndCallProcessCommand($request);

        // -------------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'url_protocols',
            [
                'url_protocol' => 'https',
            ]
        );

        // -------------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'url_protocol' => 'https',
            ]
        );
    }

    public function test_track_domain()
    {
        $url = 'https://test.com/';
        $request = $this->createRequest($this->faker->userAgent, $url);

        $this->sendRequestAndCallProcessCommand($request);

        // -------------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'url_domains',
            [
                'url_domain' => 'test.com',
            ]
        );

        // -------------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'url_domain' => 'test.com',
            ]
        );
    }

    public function test_track_domain_sub()
    {
        $url = 'https://www.test.com/';
        $request = $this->createRequest($this->faker->userAgent, $url);

        $this->sendRequestAndCallProcessCommand($request);

        // -------------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'url_domains',
            [
                'url_domain' => 'www.test.com',
            ]
        );

        // -------------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'url_domain' => 'www.test.com',
            ]
        );
    }

    public function test_track_path()
    {
        $url = 'https://www.test.com/test-path/test/test2/file.php';
        $request = $this->createRequest($this->faker->userAgent, $url);

        $this->sendRequestAndCallProcessCommand($request);

        // -------------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'url_paths',
            [
                'url_path' => '/test-path/test/test2/file.php',
            ]
        );

        // -------------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'url_path' => '/test-path/test/test2/file.php',
            ]
        );
    }

    public function test_track_path_no_file()
    {
        $url = 'https://www.test.com/test-path/test/test2';
        $request = $this->createRequest($this->faker->userAgent, $url);

        $this->sendRequestAndCallProcessCommand($request);

        // -------------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'url_paths',
            [
                'url_path' => '/test-path/test/test2',
            ]
        );

        // -------------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'url_path' => '/test-path/test/test2',
            ]
        );
    }

    public function test_track_path_leading_slash_removed()
    {
        $url = 'https://www.test.com/test-path/test/test2/';
        $request = $this->createRequest($this->faker->userAgent, $url);

        $this->sendRequestAndCallProcessCommand($request);

        // -------------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'url_paths',
            [
                'url_path' => '/test-path/test/test2',
            ]
        );

        // -------------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'url_path' => '/test-path/test/test2',
            ]
        );
    }

    public function test_track_query()
    {
        $url = 'https://www.test.com/test-path?test=1&test2=as7da98dsda3-23f23';
        $request = $this->createRequest($this->faker->userAgent, $url);

        $this->sendRequestAndCallProcessCommand($request);

        // -------------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'url_queries',
            [
                'url_query' => 'test=1&test2=as7da98dsda3-23f23',
            ]
        );

        // -------------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'url_query' => 'test=1&test2=as7da98dsda3-23f23',
            ]
        );
    }

    public function test_track_url_no_query()
    {
        $url = 'https://www.test.com/test-path/test/test2';
        $request = $this->createRequest($this->faker->userAgent, $url);

        $this->sendRequestAndCallProcessCommand($request);

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'url_query' => null,
            ]
        );
    }

    public function test_track_url_no_path()
    {
        $url = 'https://www.test.com/';
        $request = $this->createRequest($this->faker->userAgent, $url);

        $this->sendRequestAndCallProcessCommand($request);

        // -------------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'url_path' => null,
            ]
        );
    }

    public function test_track_referer()
    {
        $url = 'https://www.test.com/';
        $refererUrl = 'https://www.referer.com/345/2?test=1';
        $request = $this->createRequest($this->faker->userAgent, $url, $refererUrl);

        $this->sendRequestAndCallProcessCommand($request);

        // -------------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'url_protocols',
            [
                'url_protocol' => 'https',
            ]
        );

        // -------------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'url_protocol' => 'https',
            ]
        );
    }

    public function test_track_route()
    {
        $path = '/test/path/1';
        $query = 'test1=2&test2=3';
        $routeName = 'test.route.name';
        $routeAction = 'TestController@test';

        $route = $this->router->get(
            $path,
            [
                'as' => $routeName,
                'uses' => $routeAction
            ]
        );

        $request =
            $this->createRequest(
                $this->faker->userAgent,
                'https://www.test.com' . $path . '?' . $query
            );

        $request->setRouteResolver(
            function () use ($route) {
                return $route;
            }
        );

        $this->sendRequestAndCallProcessCommand($request);

        // -------------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'route_name' => $routeName,
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'route_action' => $routeAction,
            ]
        );

        // -------------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'route_names',
            [
                'route_name' => $routeName,
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'route_actions',
            [
                'route_action' => $routeAction,
            ]
        );
    }

    public function test_track_route_non_existing()
    {
        $this->markTestIncomplete('What do we need for this?');

        $request = $this->createRequest();

        $this->sendRequestAndCallProcessCommand($request);

        // todo
    }

    public function test_request_method()
    {
        $request = $this->createRequest(RailtrackerTestCase::USER_AGENT_CHROME_WINDOWS_10);

        $this->sendRequestAndCallProcessCommand($request);

        // -------------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'methods',
            [
                'method' => 'GET',
            ]
        );

        // -------------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'method' => 'GET',
            ]
        );
    }

    public function test_agent_chrome_webkit()
    {
        $request = $this->createRequest(RailtrackerTestCase::USER_AGENT_CHROME_WINDOWS_10);

        $this->sendRequestAndCallProcessCommand($request);

        // -------------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'agent_strings',
            [
                'agent_string' => RailtrackerTestCase::USER_AGENT_CHROME_WINDOWS_10
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'agent_browsers',
            [
                'agent_browser' => 'Chrome'
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'agent_browser_versions',
            [
                'agent_browser_version' => '58.0.3029.110'
            ]
        );

        // -------------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'agent_string' => RailtrackerTestCase::USER_AGENT_CHROME_WINDOWS_10
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'agent_browser' => 'Chrome'
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'agent_browser_version' => '58.0.3029.110'
            ]
        );
    }

    public function test_device_windows_10_chrome_webkit()
    {
        $request = $this->createRequest(RailtrackerTestCase::USER_AGENT_CHROME_WINDOWS_10);

        $this->sendRequestAndCallProcessCommand($request);

        // -------------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'device_kinds',
            [
                'device_kind' => 'desktop',
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'device_models',
            [
                'device_model' => 'WebKit',
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'device_platforms',
            [
                'device_platform' => 'Windows',
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'device_versions',
            [
                'device_version' => '10.0',
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'device_versions',
            [
                'device_version' => '10.0',
            ]
        );

        // -------------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'device_kind' => 'desktop',
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'device_model' => 'WebKit',
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'device_platform' => 'Windows',
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'device_version' => '10.0',
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'device_version' => '10.0',
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'device_is_mobile' => false,
            ]
        );
    }

    public function test_track_language()
    {
        $request = $this->createRequest(RailtrackerTestCase::USER_AGENT_CHROME_WINDOWS_10);

        $this->sendRequestAndCallProcessCommand($request);

        // -------------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'language_preferences',
            [
                'language_preference' => 'en-gb',
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'language_ranges',
            [
                'language_range' => 'en-gb,en-us,en',
            ]
        );

        // -------------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'language_preference' => 'en-gb',
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'language_range' => 'en-gb,en-us,en',
            ]
        );
    }

    public function test_request_no_route()
    {
        Carbon::setTestNow(Carbon::now());

        $userId = $this->createAndLogInNewUser();

        $url = 'https://www.testing.com/?test=1';
        $refererUrl = 'http://www.referer-testing.com/?test=2';
        $clientIp = '183.22.98.51';

        $request = $this->createRequest(
            RailtrackerTestCase::USER_AGENT_CHROME_WINDOWS_10,
            $url,
            $refererUrl,
            $clientIp
        );

        $request->setUserResolver(
            function () use ($userId) {
                return User::query()->find($userId);
            }
        );

        $this->sendRequestAndCallProcessCommand($request);

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'id' => '1',
                //'uuid' => RequestTracker::$uuid,  // todo: why can't we get uuid here?
                'user_id' => 1,
                'cookie_id' => null,

                'url_protocol' => 'https',
                'url_domain' => 'www.testing.com',
                'url_path' => '/',
                'url_query' => 'test=1',

                'method' => 'GET',
                'route_name' => null,
                'route_action' => null,

                'device_kind' => 'desktop',
                'device_model' => 'WebKit',
                'device_platform' => 'Windows',
                'device_version' => '10.0',
                'device_is_mobile' => '0',

                'agent_string' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) ' .
                    'Chrome/58.0.3029.110 Safari/537.36',
                'agent_browser' => 'Chrome',
                'agent_browser_version' => '58.0.3029.110',

                'referer_url_protocol' => 'http',
                'referer_url_domain' => 'www.referer-testing.com',
                'referer_url_path' => '/',
                'referer_url_query' => 'test=2',

                'language_preference' => 'en-gb',
                'language_range' => 'en-gb,en-us,en',

                'ip_address' => '183.22.98.51',
                'ip_latitude' => null,
                'ip_longitude' => null,
                'ip_country_code' => null,
                'ip_country_name' => null,
                'ip_region' => null,
                'ip_city' => null,
                'ip_postal_zip_code' => null,
                'ip_timezone' => null,
                'ip_currency' => null,

                'is_robot' => '0',
                'requested_on' => Carbon::now()->format('Y-m-d H:i:s.u'),
            ]
        );

        // ----------------------------------------------------
        // ----------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'url_domains',
            [
                'url_domain' => 'www.testing.com',
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'url_paths',
            [
                'url_path' => '/',
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'url_queries',
            [
                'url_query' => 'test=1',
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'url_protocols',
            [
                'url_protocol' => 'https',
            ]
        );

        // ----------------------------------------------------


        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'route_names',
            [
                'route_name' => null,
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'route_actions',
            [
                'route_action' => null,
            ]
        );

        $this->assertDatabaseMissing(
            config('railtracker.table_prefix') . 'route_names',
            [
                'route_name' => 'test.route.name',
            ]
        );

        $this->assertDatabaseMissing(
            config('railtracker.table_prefix') . 'route_actions',
            [
                'route_action' => 'TestController@test',
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'methods',
            [
                'method' => 'GET',
            ]
        );

        // ----------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'agent_strings',
            [
                'agent_string' => RailtrackerTestCase::USER_AGENT_CHROME_WINDOWS_10
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'agent_browsers',
            [
                'agent_browser' => 'Chrome'
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'agent_browser_versions',
            [
                'agent_browser_version' => '58.0.3029.110'
            ]
        );

        // ----------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'device_kinds',
            [
                'device_kind' => 'desktop',
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'device_models',
            [
                'device_model' => 'WebKit',
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'device_platforms',
            [
                'device_platform' => 'Windows',
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'device_versions',
            [
                'device_version' => '10.0',
            ]
        );

        // ----------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'language_preferences',
            [
                'language_preference' => 'en-gb',
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'language_ranges',
            [
                'language_range' => 'en-gb,en-us,en',
            ]
        );

        // ----------------------------------------------------
    }

    /* ---------------------------------------------------------

        todo: test for responses

        assert for values for these columns in requests table:

        * response_status_code
        * response_duration_ms
        * responded_on

    --------------------------------------------------------- */

    public function test_request_with_route()
    {
        Carbon::setTestNow(Carbon::now());

        $userId = $this->createAndLogInNewUser();

        $path = '/test/path/1';
        $query = 'test1=2&test2=3';
        $routeName = 'test.route.name';
        $routeAction = 'TestController@test';

        $url = 'https://www.testing.com' . $path . '?' . $query;
        $refererUrl = 'http://www.referer-testing.com/?test=2';
        $clientIp = '183.22.98.51';

        $route = $this->router->get(
            $path,
            [
                'as' => $routeName,
                'uses' => $routeAction
            ]
        );

        $request = $this->createRequest(
            RailtrackerTestCase::USER_AGENT_CHROME_WINDOWS_10,
            $url,
            $refererUrl,
            $clientIp
        );

        $request->setRouteResolver(
            function () use ($route) {
                return $route;
            }
        );

        $request->setUserResolver(
            function () use ($userId) {
                return User::query()->find($userId);
            }
        );

        $this->sendRequestAndCallProcessCommand($request);

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'id' => '1',
                //'uuid' => RequestTracker::$uuid,  // todo: why can't we get uuid here?
                'user_id' => 1,
                'cookie_id' => null,

                'url_protocol' => 'https',
                'url_domain' => 'www.testing.com',
                'url_path' => $path,
                'url_query' => $query,

                'method' => 'GET',
                'route_name' => $routeName,
                'route_action' => $routeAction,

                'device_kind' => 'desktop',
                'device_model' => 'WebKit',
                'device_platform' => 'Windows',
                'device_version' => '10.0',
                'device_is_mobile' => '0',

                'agent_string' => RailtrackerTestCase::USER_AGENT_CHROME_WINDOWS_10,
                'agent_browser' => 'Chrome',
                'agent_browser_version' => '58.0.3029.110',

                'referer_url_protocol' => 'http',
                'referer_url_domain' => 'www.referer-testing.com',
                'referer_url_path' => '/',
                'referer_url_query' => 'test=2',

                'language_preference' => 'en-gb',
                'language_range' => 'en-gb,en-us,en',

                'ip_address' => $clientIp,
                'ip_latitude' => null,
                'ip_longitude' => null,
                'ip_country_code' => null,
                'ip_country_name' => null,
                'ip_region' => null,
                'ip_city' => null,
                'ip_postal_zip_code' => null,
                'ip_timezone' => null,
                'ip_currency' => null,

                'is_robot' => '0',
                'requested_on' => Carbon::now()->format('Y-m-d H:i:s.u'),
            ]
        );

        // ----------------------------------------------------
        // ----------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'url_domains',
            [
                'url_domain' => 'www.testing.com',
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'url_paths',
            [
                'url_path' => $path,
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'url_queries',
            [
                'url_query' => $query,
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'url_protocols',
            [
                'url_protocol' => 'https',
            ]
        );

        // ----------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'route_names',
            [
                'route_name' => $routeName,
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'route_actions',
            [
                'route_action' => $routeAction,
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'methods',
            [
                'method' => 'GET',
            ]
        );

        // ----------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'agent_strings',
            [
                'agent_string' => RailtrackerTestCase::USER_AGENT_CHROME_WINDOWS_10
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'agent_browsers',
            [
                'agent_browser' => 'Chrome'
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'agent_browser_versions',
            [
                'agent_browser_version' => '58.0.3029.110'
            ]
        );

        // ----------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'device_kinds',
            [
                'device_kind' => 'desktop',
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'device_models',
            [
                'device_model' => 'WebKit',
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'device_platforms',
            [
                'device_platform' => 'Windows',
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'device_versions',
            [
                'device_version' => '10.0',
            ]
        );

        // ----------------------------------------------------

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'language_preferences',
            [
                'language_preference' => 'en-gb',
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'language_ranges',
            [
                'language_range' => 'en-gb,en-us,en',
            ]
        );

        // ----------------------------------------------------
    }

    public function test_cookie_is_saved_on_request_for_visitor()
    {
        $url = 'https://www.testing.com/?test=1';
        $refererUrl = 'http://www.referer-testing.com/?test=2';
        $clientIp = '183.22.98.51';
        $_COOKIE[RequestTracker::$cookieKey] = 'kmn234';

        $request =
            $this->createRequest($this->faker->userAgent, $url, $refererUrl, $clientIp, 'GET', $_COOKIE);

        $this->sendRequestAndCallProcessCommand($request);

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'user_id' => null,
                'cookie_id' => 'kmn234',
            ]
        );
    }

    public function test_cookie_is_saved_on_request_for_authenticated_user()
    {
        $userId = $this->createAndLogInNewUser();
        $url = 'https://www.testing.com/?test=1';
        $refererUrl = 'http://www.referer-testing.com/?test=2';
        $clientIp = '183.22.98.51';
        $_COOKIE[RequestTracker::$cookieKey] = 'kmn234';

        $request =
            $this->createRequest($this->faker->userAgent, $url, $refererUrl, $clientIp, 'GET', $_COOKIE);

        $request->setUserResolver(
            function () use ($userId) {
                return User::query()->find($userId);
            }
        );

        $this->sendRequestAndCallProcessCommand($request);

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'user_id' => $userId,
                'cookie_id' => 'kmn234',
            ]
        );
    }

    public function test_user_id_set_on_old_requests_after_authentication()
    {
        $url = 'https://www.testing.com/?test=1';
        $refererUrl = 'http://www.referer-testing.com/?test=2';
        $clientIp = '183.22.98.51';
        $_COOKIE[RequestTracker::$cookieKey] = 'kmn234';

        $request = $this->createRequest($this->faker->userAgent, $url, $refererUrl, $clientIp, 'GET', $_COOKIE);

        $this->sendRequestAndCallProcessCommand($request);

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'user_id' => null,
                'cookie_id' => 'kmn234',
            ]
        );

        $request = $this->createRequest($this->faker->userAgent, $url, $refererUrl, $clientIp, 'GET', $_COOKIE);
        $userId = $this->createAndLogInNewUser();
        $request->setUserResolver(function () use ($userId) { return User::query()->find($userId); });

        $this->sendRequestAndCallProcessCommand($request);

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'user_id' => $userId,
                'cookie_id' => 'kmn234',
                ]
        );

        $rows = DB::table(config('railtracker.table_prefix') . 'requests')->get();
        $this->assertEquals($userId, $rows[1]->user_id);
    }

    public function test_user_id_set_on_old_requests_after_authentication_multiple_users()
    {
        $numberToRun = 10;

        $cookieKeys = [];
        $userIds = [];


        // ============================ first set of requests ==========================================================

        for ($i = 0; $i < $numberToRun; $i++){

            $url = $this->faker->url;
            $refererUrl = $this->faker->url;
            $clientIp = $this->faker->ipv4;
            $cookieKeys[$i] = $this->faker->word . rand(00000,99999);
            $_COOKIE[RequestTracker::$cookieKey] = $cookieKeys[$i];

            $request = $this->createRequest($this->faker->userAgent, $url, $refererUrl, $clientIp, 'GET', $_COOKIE);
            $this->sendRequest($request);
            $this->assertDatabaseMissing(
                config('railtracker.table_prefix') . 'url_protocols',
                ['user_id' => null,'cookie_id' => $cookieKeys[$i]]
            );
        }

        // ============================ process first set ==============================================================

        try{
            $this->processTrackings();
        }catch(\Exception $exception){
            $this->fail($exception->getMessage());
        }

        // ============================ first set of assertions ========================================================

        for ($i = 0; $i < $numberToRun; $i++) {
            $this->assertDatabaseHas(
                config('railtracker.table_prefix') . 'requests',
                ['user_id' => null,'cookie_id' => $cookieKeys[$i]]
            );
        }

        // ============================ second set of requests (send, then process) ====================================

        for ($i = 0; $i < $numberToRun; $i++){
            $url = $this->faker->url;
            $refererUrl = $this->faker->url;
            $clientIp = $this->faker->ipv4;
            $_COOKIE[RequestTracker::$cookieKey] = $cookieKeys[$i];

            $userIds[$i] = $this->createAndLogInNewUser();
            $request = $this->createRequest($this->faker->userAgent, $url, $refererUrl, $clientIp, 'GET', $_COOKIE);
            $request->setUserResolver(function () use ($userIds, $i) { return User::query()->find($userIds[$i]); });
            $this->sendRequest($request);
        }

        // ============================ process second set =============================================================

        try{
            $this->processTrackings();
        }catch(\Exception $exception){
            $this->fail($exception->getMessage());
        }

        // ============================ second set of assertions =======================================================

        $requests = collect(DB::table(config('railtracker.table_prefix') . 'requests')->get()->all());

        $requestsKeyedByCookieId = [];

        // key by id
        foreach($requests as $request){
            $requestsKeyedByCookieId[$request->cookie_id] = $request;
        }

        for ($i = 0; $i < $numberToRun; $i++) {
            $this->assertDatabaseHas(
                config('railtracker.table_prefix') . 'requests',
                ['user_id' => $userIds[$i], 'cookie_id' => $cookieKeys[$i]]
            );

            $secondRequest = $requestsKeyedByCookieId[$cookieKeys[$i]];

            $this->assertEquals($userIds[$i], $secondRequest->user_id);
        }

    }

    public function test_user_id_set_on_old_requests_after_authentication_multiple_requests()
    {
        $numberOrUsers = 10;
        $numberOrRequestsPerUser = 8;

        $cookieKeys = [];
        $userIds = [];

        $now = Carbon::parse('2019-06-19 12:00:00');

        Carbon::setTestNow($now);

        // ============================ primary set of requests ========================================================

        for ($i = 0; $i < $numberOrUsers; $i++){

            $url = $this->faker->url;
            $refererUrl = $this->faker->url;
            $clientIp = $this->faker->ipv4;
            $cookieKeys[$i] = $this->faker->word . rand(00000,99999);
            $_COOKIE[RequestTracker::$cookieKey] = $cookieKeys[$i];

            $request = $this->createRequest($this->faker->userAgent, $url, $refererUrl, $clientIp, 'GET', $_COOKIE);
            $this->sendRequest($request);
            $this->assertDatabaseMissing(
                config('railtracker.table_prefix') . 'requests',
                ['user_id' => null,'cookie_id' => $cookieKeys[$i]]
            );
        }

        for ($i = 0; $i < $numberOrUsers; $i++){

            for ($r = 0; $r < $numberOrRequestsPerUser; $r++){

                $url = $this->faker->url;
                $refererUrl = $this->faker->url;
                $clientIp = $this->faker->ipv4;
                $_COOKIE[RequestTracker::$cookieKey] = $cookieKeys[$i];

                $request = $this->createRequest($this->faker->userAgent, $url, $refererUrl, $clientIp, 'GET', $_COOKIE);
                $this->sendRequest($request);
                $this->assertDatabaseMissing(
                    config('railtracker.table_prefix') . 'requests',
                    ['user_id' => null,'cookie_id' => $cookieKeys[$i]]
                );
            }
        }

        // ============================ process primary set ============================================================

        try{
            $this->processTrackings();
        }catch(\Exception $exception){
            $this->fail($exception->getMessage());
        }

        //   -    -    -    -    -    -    -    -    -    -    -    -    -    -    -    -    -    -    -
        // debugging and dev aids only                                      // debugging and dev aids only
        $_db_ = $this->seeDbWhileDebugging();                               // debugging and dev aids only
        foreach($_db_['railtracker_requests'] as $_TEMP_request){           // debugging and dev aids only
            $_TEMP_cookieId = $_TEMP_request['cookie_id'];                  // debugging and dev aids only
            $_TEMP_requestsByCookieId[$_TEMP_cookieId][] = $_TEMP_request;  // debugging and dev aids only
        }                                                                   // debugging and dev aids only
        //   -    -    -    -    -    -    -    -    -    -    -    -    -    -    -    -    -    -    -

        // ============================ primary set of assertions ======================================================

        for ($i = 0; $i < $numberOrUsers; $i++) {
            $this->assertDatabaseHas(
                config('railtracker.table_prefix') . 'requests',
                ['user_id' => null,'cookie_id' => $cookieKeys[$i]]
            );
        }

        // ============================ wait before executing secondary set of requests ================================

        // todo: evaluate if still needed, remove if not

        $now->addHour();

        Carbon::setTestNow($now);

        // ============================ secondary set of requests (send, then process) =================================

        for ($i = 0; $i < $numberOrUsers; $i++){
            $url = $this->faker->url;
            $refererUrl = $this->faker->url;
            $clientIp = $this->faker->ipv4;
            $_COOKIE[RequestTracker::$cookieKey] = $cookieKeys[$i];

            $userIds[$i] = $this->createAndLogInNewUser();
            $request = $this->createRequest($this->faker->userAgent, $url, $refererUrl, $clientIp, 'GET', $_COOKIE);
            $request->setUserResolver(function () use ($userIds, $i) { return User::query()->find($userIds[$i]); });
            $this->sendRequest($request);
        }

        // ============================ process secondary set ==========================================================

        try{
            $this->processTrackings();
        }catch(\Exception $exception){
            $this->fail($exception->getMessage());
        }

        // ============================ secondary set of assertions ====================================================

        $requests = collect(DB::table(config('railtracker.table_prefix') . 'requests')->get()->all());

        $requestsKeyedByCookieId = [];

        // key by id
        foreach($requests as $request){
            $requestsKeyedByCookieId[$request->cookie_id] = $request;
        }

        for ($i = 0; $i < $numberOrUsers; $i++) {
            $this->assertDatabaseHas(
                config('railtracker.table_prefix') . 'requests',
                ['user_id' => $userIds[$i], 'cookie_id' => $cookieKeys[$i]]
            );

            $this->assertDatabaseMissing(
                config('railtracker.table_prefix') . 'requests',
                ['user_id' => null, 'cookie_id' => $cookieKeys[$i]]
            );

            // todo: replace this because it's (maybe) totally wrong?
            //$secondRequest = $requestsKeyedByCookieId[$cookieKeys[$i]];

            // todo: reinstate this?
//            $this->assertEquals($userIds[$i], $secondRequest->user_id);
        }
    }

    public function test_track_request_with_not_excluded_paths()
    {
        $path = '/test1';
        $url = 'https://www.test.com' . $path;
        $request = $this->createRequest($this->faker->userAgent, $url);

        $this->sendRequestAndCallProcessCommand($request);

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'requests',
            [
                'url_path' => $path,
            ]
        );

        $this->assertDatabaseHas(
            config('railtracker.table_prefix') . 'url_paths',
            [
                'url_path' => $path,
            ]
        );
    }

    public function test_not_track_request_from_excluded_paths()
    {
        $path = '/media-playback-tracking/media-playback-session';
        //$path = '/media-FOO-playback-BAR-tracking/media-playback-session'; // use this to see failure

        $url = 'https://www.test.com' . $path;
        $request = $this->createRequest($this->faker->userAgent, $url);

        $this->sendRequestAndCallProcessCommand($request);

        $this->assertDatabaseMissing(
            config('railtracker.table_prefix') . 'requests',
            [
                'url_path' => $path,
            ]
        );

        $this->assertDatabaseMissing(
            config('railtracker.table_prefix') . 'url_paths',
            [
                'path' => $path,
            ]
        );
    }

    public function test_not_track_request_from_excluded_paths_wildcard_regex()
    {
        $url = 'https://www.test.com/media-playback-tracking/media-playback-session/123';
        $request = $this->createRequest($this->faker->userAgent, $url);

        $this->sendRequestAndCallProcessCommand($request);

        $this->assertDatabaseMissing(
            config('railtracker.table_prefix') . 'url_protocols',
            [
                'path' => '/media-playback-tracking/media-playback-session',
            ]
        );
    }

    public function test_request_last_requested_on_for_user()
    {
        $request = $this->createRequest();

        $userId = $this->createAndLogInNewUser();

        $request->setUserResolver(
            function () use ($userId) {
                return User::query()->find($userId);
            }
        );

        $this->expectsEvents(RequestTracked::class);

        $this->sendRequestAndCallProcessCommand($request);

        $requestIdActual = $this->firedEvents[0]->requestId;

        $this->assertEquals($requestIdActual, 1);
        $this->assertEquals($this->firedEvents[0]->userId, $userId);

        $requestedOnDateTimeForFirstEvent = $this->firedEvents[0]->requestedOnDateTime;
        $this->assertEquals(
            Carbon::now()->format(RequestVO::$TIME_FORMAT),
            $requestedOnDateTimeForFirstEvent
        );

        $this->assertEquals($this->firedEvents[0]->usersPreviousRequestedOnDateTime, null);

        $now = Carbon::now();
        $hourLater = Carbon::now()->copy()->addHour();

        Carbon::setTestNow($hourLater);

        $this->sendRequestAndCallProcessCommand($request);

        $this->assertEquals($this->firedEvents[1]->requestId, 2);
        $this->assertEquals($this->firedEvents[1]->userId, $userId);
        $this->assertEquals(
            $this->firedEvents[1]->requestedOnDateTime,
            $hourLater->format(RequestVO::$TIME_FORMAT)
        );

        $usersPreviousRequestedOnDateTime = $this->firedEvents[1]->usersPreviousRequestedOnDateTime;
        $this->assertEquals($usersPreviousRequestedOnDateTime, $now->format(RequestVO::$TIME_FORMAT));
    }

    public function test_request_last_requested_on_for_user_random_larger_number_or_requests()
    {
        $request = $this->createRequest();

        $userId = $this->createAndLogInNewUser();

        $request->setUserResolver(
            function () use ($userId) {
                return User::query()->find($userId);
            }
        );

        $this->expectsEvents(RequestTracked::class);

        $numberOfRequests = rand(5,10);

        $now = Carbon::now();
        $hourLater = $now->copy()->addHour();

        for($i = 0; $i < $numberOfRequests; $i++){
            Carbon::setTestNow($hourLater);

            $this->sendRequestAndCallProcessCommand($request);
        }

        $indexOfMostRecentEvent = $numberOfRequests - 1;
        $mostRecentRequest = $this->firedEvents[$indexOfMostRecentEvent];

        $expectedRequestId = (string) $numberOfRequests;

        $this->assertEquals($mostRecentRequest->requestId, $expectedRequestId);
        $this->assertEquals($mostRecentRequest->userId, $userId);
        $this->assertEquals(
            $mostRecentRequest->requestedOnDateTime,
            $hourLater->format(RequestVO::$TIME_FORMAT)
        );

        $usersPreviousRequestedOnDateTime = $mostRecentRequest->usersPreviousRequestedOnDateTime;

        $expected = $hourLater->copy()->format(RequestVO::$TIME_FORMAT);

        $this->assertEquals($expected, $usersPreviousRequestedOnDateTime);
    }

    public function test_get_requests_for_user()
    {
        $userId = $this->createAndLogInNewUser();

        $path = '/test/path/1';
        $query = 'test1=2&test2=3';
        $routeName = 'test.route.name';
        $routeAction = 'TestController@test';

        $url = 'https://www.testing.com' . $path . '?' . $query;
        $refererUrl = 'http://www.referer-testing.com/?test=2';
        $clientIp = '183.22.98.51';

        $route = $this->router->get(
            $path,
            [
                'as' => $routeName,
                'uses' => $routeAction
            ]
        );

        $request = $this->createRequest(
            RailtrackerTestCase::USER_AGENT_CHROME_WINDOWS_10,
            $url,
            $refererUrl,
            $clientIp
        );

        $request->setRouteResolver(
            function () use ($route) {
                return $route;
            }
        );

        $request->setUserResolver(
            function () use ($userId) {
                return User::query()->find($userId);
            }
        );

        $this->sendRequestAndCallProcessCommand($request);

        $results = $this->getRequestsForUser((string) $userId);

        $result = $results[0];

        $this->assertArraySubset(
            [
                "protocol" => "https",
                "domain" => "www.testing.com",
                "path" => "/test/path/1",
                "query" => "test1=2&test2=3",
                "route_name" => "test.route.name",
                "route_action" => "TestController@test",
                "agent" => "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36",
                "agent_browser" => "Chrome",
                "agent_browser_version" => "58.0.3029.110",
                "device_type" => "desktop",
                "device_model" => "WebKit",
                "device_platform" => "Windows",
                "device_platform_version" => "10.0",
                "device_is_mobile" => false,
                "language_preference" => "en-gb",
                "language_range" => "en-gb,en-us,en",
            ],
            [
                'protocol' => $result->url_protocol,
                "domain" => $result->url_domain,
                "path" => $result->url_path,
                "query" => $result->url_query,
                "route_name" => $result->route_name,
                "route_action" => $result->route_action,
                "agent" => $result->agent_string,
                "agent_browser" => $result->agent_browser,
                "agent_browser_version" => $result->agent_browser_version,
                "device_type" => $result->device_kind,
                "device_model" => $result->device_model,
                "device_platform" => $result->device_platform,
                "device_platform_version" => $result->device_version,
                "device_is_mobile" => $result->device_is_mobile,
                "language_preference" => $result->language_preference,
                "language_range" => $result->language_range,
            ]
        );
    }

    public function test_get_requests_for_user_skip_and_limit_options()
    {
        $userId = $this->createAndLogInNewUser();
        $totalNumberToMake = 4;
        $limit = 2;
        $skip = 1;
        $expectedInResultsSet = [];
        for($i = 0; $i < $totalNumberToMake; $i++) {
            $path = '/test/path/' . $i;
            $query = 'test1=2&test2=3';
            $routeName = 'test.route.name';
            $routeAction = 'TestController@test';
            $url = 'https://www.testing.com' . $path . '?' . $query;
            $refererUrl = 'http://www.referer-testing.com/?test=2';
            $clientIp = '183.22.98.51';
            $route = $this->router->get($path, ['as' => $routeName, 'uses' => $routeAction]);
            $request = $this->createRequest(
                RailtrackerTestCase::USER_AGENT_CHROME_WINDOWS_10,
                $url,
                $refererUrl,
                $clientIp
            );
            $request->setRouteResolver(
                function () use ($route) {
                    return $route;
                }
            );
            $request->setUserResolver(
                function () use ($userId) {
                    return User::query()->find($userId);
                }
            );
            $this->sendRequestAndCallProcessCommand($request);

            $highEnough = ($i - $skip) >= 0;
            $lowEnough = $i < ($skip + $limit);

            if($highEnough && $lowEnough){
                $expectedInResultsSet[] = $i;
            }
        }

        $allResults = $this->getRequestsForUser((string) $userId);
        $results = $this->getRequestsForUser((string) $userId, $limit, $skip);

        $this->assertCount($totalNumberToMake, $allResults);
        $this->assertCount($limit, $results);

        for($i = 0; $i < count($results); $i++){
            $result = $results[$i]; /** @var stdClass $result */
            $this->assertArraySubset(
                [
                    "protocol" => "https",
                    "domain" => "www.testing.com",
                    "path" => "/test/path/" . $expectedInResultsSet[$i],
                    "query" => "test1=2&test2=3",
                    "route_name" => "test.route.name",
                    "route_action" => "TestController@test",
                    "agent" => "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36",
                    "agent_browser" => "Chrome",
                    "agent_browser_version" => "58.0.3029.110",
                    "device_type" => "desktop",
                    "device_model" => "WebKit",
                    "device_platform" => "Windows",
                    "device_platform_version" => "10.0",
                    "device_is_mobile" => false,
                    "language_preference" => "en-gb",
                    "language_range" => "en-gb,en-us,en",
                ],[
                    'protocol' => $result->url_protocol,
                    "domain" => $result->url_domain,
                    "path" => $result->url_path,
                    "query" => $result->url_query,
                    "route_name" => $result->route_name,
                    "route_action" => $result->route_action,
                    "agent" => $result->agent_string,
                    "agent_browser" => $result->agent_browser,
                    "agent_browser_version" => $result->agent_browser_version,
                    "device_type" => $result->device_kind,
                    "device_model" => $result->device_model,
                    "device_platform" => $result->device_platform,
                    "device_platform_version" => $result->device_version,
                    "device_is_mobile" => $result->device_is_mobile,
                    "language_preference" => $result->language_preference,
                    "language_range" => $result->language_range,
                ]
            );
        }
        $this->assertEquals($limit, $i); // ensures above ran expected number of times
    }

    public function test_geoip_table_populated()
    {
        $input = IpDataApiStubDataProvider::$INPUT;
        $output = IpDataApiStubDataProvider::output();
        $expected = IpDataApiStubDataProvider::expectedInDatabase();

        $this->ipDataApiSdkServiceMock
            ->method('bulkRequest')
            ->willReturn($output);

        foreach($input as $ip){
            $request = $this->randomRequest($ip);
            $this->sendRequest($request);
        }

        try{
            $this->processTrackings();
        }catch(\Exception $exception){
            $this->fail($exception->getMessage());
        }

        foreach($expected as $expectedRow){
            $this->assertDatabaseHas(
                config('railtracker.table_prefix') . 'url_protocols',
                $expectedRow
            );
        }
    }

    // todo: test that geoip rows connected to requests
}
